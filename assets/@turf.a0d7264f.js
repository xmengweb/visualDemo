import{i as S}from"./polygon-clipping.51c2882e.js";var u=63710088e-1,C={centimeters:u*100,centimetres:u*100,degrees:u/111325,feet:u*3.28084,inches:u*39.37,kilometers:u/1e3,kilometres:u/1e3,meters:u,metres:u,miles:u/1609.344,millimeters:u*1e3,millimetres:u*1e3,nauticalmiles:u/1852,radians:1,yards:u*1.0936};function v(e,r,t){t===void 0&&(t={});var i={type:"Feature"};return(t.id===0||t.id)&&(i.id=t.id),t.bbox&&(i.bbox=t.bbox),i.properties=r||{},i.geometry=e,i}function b(e,r,t){t===void 0&&(t={});for(var i=0,a=e;i<a.length;i++){var n=a[i];if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var o=0;o<n[n.length-1].length;o++)if(n[n.length-1][o]!==n[0][o])throw new Error("First and last Position are not equivalent.")}var f={type:"Polygon",coordinates:e};return v(f,r,t)}function M(e,r,t){if(t===void 0&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");var i={type:"LineString",coordinates:e};return v(i,r,t)}function G(e,r){r===void 0&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function x(e,r,t){t===void 0&&(t={});var i={type:"MultiLineString",coordinates:e};return v(i,r,t)}function T(e,r,t){t===void 0&&(t={});var i={type:"MultiPolygon",coordinates:e};return v(i,r,t)}function k(e,r){r===void 0&&(r="kilometers");var t=C[r];if(!t)throw new Error(r+" units is invalid");return e*t}function q(e){var r=e%360;return r*Math.PI/180}function J(e,r){r===void 0&&(r={});var t=Number(e[0]),i=Number(e[1]),a=Number(e[2]),n=Number(e[3]);if(e.length===6)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var o=[t,i],f=[t,n],c=[a,n],l=[a,i];return b([[o,l,c,f,o]],r.properties,{bbox:e,id:r.id})}function N(e,r){var t,i,a,n,o,f,c,l,s,d,g=0,y=e.type==="FeatureCollection",h=e.type==="Feature",F=y?e.features.length:1;for(t=0;t<F;t++){for(f=y?e.features[t].geometry:h?e.geometry:e,l=y?e.features[t].properties:h?e.properties:{},s=y?e.features[t].bbox:h?e.bbox:void 0,d=y?e.features[t].id:h?e.id:void 0,c=f?f.type==="GeometryCollection":!1,o=c?f.geometries.length:1,a=0;a<o;a++){if(n=c?f.geometries[a]:f,n===null){if(r(null,g,l,s,d)===!1)return!1;continue}switch(n.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(r(n,g,l,s,d)===!1)return!1;break}case"GeometryCollection":{for(i=0;i<n.geometries.length;i++)if(r(n.geometries[i],g,l,s,d)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}g++}}function U(e,r){N(e,function(t,i,a,n,o){var f=t===null?null:t.type;switch(f){case null:case"Point":case"LineString":case"Polygon":return r(v(t,a,{bbox:n,id:o}),i,0)===!1?!1:void 0}var c;switch(f){case"MultiPoint":c="Point";break;case"MultiLineString":c="LineString";break;case"MultiPolygon":c="Polygon";break}for(var l=0;l<t.coordinates.length;l++){var s=t.coordinates[l],d={type:c,coordinates:s};if(r(v(d,a),i,l)===!1)return!1}})}function z(e){if(Array.isArray(e))return e;if(e.type==="Feature"){if(e.geometry!==null)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function m(e){return e.type==="Feature"?e.geometry:e}function D(e,r,t){t===void 0&&(t={});var i=m(e),a=m(r),n=S.union(i.coordinates,a.coordinates);return n.length===0?null:n.length===1?b(n[0],t.properties):T(n,t.properties)}function H(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return w(e);case"FeatureCollection":return O(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return p(e);default:throw new Error("unknown GeoJSON type")}}function w(e){var r={type:"Feature"};return Object.keys(e).forEach(function(t){switch(t){case"type":case"properties":case"geometry":return;default:r[t]=e[t]}}),r.properties=P(e.properties),r.geometry=p(e.geometry),r}function P(e){var r={};return e&&Object.keys(e).forEach(function(t){var i=e[t];typeof i=="object"?i===null?r[t]=null:Array.isArray(i)?r[t]=i.map(function(a){return a}):r[t]=P(i):r[t]=i}),r}function O(e){var r={type:"FeatureCollection"};return Object.keys(e).forEach(function(t){switch(t){case"type":case"features":return;default:r[t]=e[t]}}),r.features=e.features.map(function(t){return w(t)}),r}function p(e){var r={type:e.type};return e.bbox&&(r.bbox=e.bbox),e.type==="GeometryCollection"?(r.geometries=e.geometries.map(function(t){return p(t)}),r):(r.coordinates=L(e.coordinates),r)}function L(e){var r=e;return typeof r[0]!="object"?r.slice():r.map(function(t){return L(t)})}function K(e,r){r===void 0&&(r={});var t=m(e);switch(!r.properties&&e.type==="Feature"&&(r.properties=e.properties),t.type){case"Polygon":return A(t,r);case"MultiPolygon":return R(t,r);default:throw new Error("invalid poly")}}function A(e,r){r===void 0&&(r={});var t=m(e),i=t.coordinates,a=r.properties?r.properties:e.type==="Feature"?e.properties:{};return E(i,a)}function R(e,r){r===void 0&&(r={});var t=m(e),i=t.coordinates,a=r.properties?r.properties:e.type==="Feature"?e.properties:{},n=[];return i.forEach(function(o){n.push(E(o,a))}),G(n)}function E(e,r){return e.length>1?x(e,r):M(e[0],r)}export{b as a,J as b,H as c,q as d,U as f,z as g,K as p,k as r,D as u};
